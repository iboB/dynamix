/*! \page using Using DynaMix

[TOC]

Platforms {#platforms}
=========

The library has been (and continues to be) developed and tested with and 32 and
64 bit builds with the compilers:

- On Windows: Visual C++ 12 (2013), Visual C++ 14 (2015), mingw-gcc 5.1.0
- On Linux: gcc 4.6.3, gcc 4.7, clang 3.0
- On OSX and iOS: clang 3.0 (XCode 4.2)
- On Android: arm-gcc 4.6.1

Other C++11 compliant compilers will most likely also work

Dependencies {#deps}
============

The library has no external dependencies other than the standard C++ libraries.

Getting the library {#getting}
===================

You can get DynaMix from [its
official repository at GitHub](https://github.com/iboB/dynamix).

Building the library {#building}
====================

A `CMakeLists.txt` file for CMake is provided for the library.

If you want something else, all you need to do is compile and link all the
`.cpp` files from the `src` directory.

Configuration {#config}
-------------

Here is a list of the configuration options from `config.hpp`. *You need to
rebiuld the library if you change any of those*.

- `DYNAMIX_USE_TYPEID` &ndash; determines the way by which the mixin class names
are obtained by the library. The default value is nonzero which makes use of
C++'s Runtime type information (RTTI): `typeid` and `type_info`. If you set it
to zero, then, in order for your code to compile, every mixin type will need
to have a public static method &ndash; `static const char* dynamix_mixin_name()`
&ndash; which returns a unique string for a class.
- `DYNAMIX_MAX_MIXINS` &ndash; determines the maximum number of mixins that can be
registered in an application.
- `DYNAMIX_MAX_MESSAGES` &ndash; determines the maximum number of messages that can
be registered in an application.
-  `DYNAMIX_USE_EXCEPTIONS` &ndash; shows whether the library throws exceptions.
You can disable this for a small performance gain.
- `DYNAMIX_OBJECT_IMPLICIT_COPY` &ndash; enables and disables the
copy-constructros and assignment operators for `dynamix::object`. The default is
off to prevent unwanted copies.
- `DYNAMIX_THREAD_SAFE_MUTATIONS` &ndash; allows the mutation of objects in
different threads. You can disable this for a small performance gain on
mutation. HOWEVER:
    - Mutating the same object in multiple threads is never safe.
    - Mutating an object in one thread and calling messages for this object in
    another is never safe.
- `DYNAMIX_ADDITIONAL_METRICS` &dnash; allows the access to some useful metrics
about the library's usage such as number of "living" objects or mixins of a
given type.

Using the library {#using}
=================

To use the library in your programs, you only need to include its main header:
`dynamix/dynamix.hpp`.

No special initialization or deinitialization code is needed.

Contacts {#contact}
========

For questions and comments you're welcome to use the [GitHub issue tracker of the library](https://github.com/iboB/dynamix/issues).

*/
